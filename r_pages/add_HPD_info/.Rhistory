results <- vector()
total <- sum(x)
value <- exp(-0.5 * x)
valueD <- value/total
results <- c(results, valueD)
return(results)
}
# Specialization data
x <- c(0, 28.62, 38.02, 38.45, 39.83, 40.58, 42.47, 45.42, 49.13, 121.67, 171.77, 202.9,
247.57, 433.06, 2801.84, 4878.84)
AIC.weights(x)
1.089304e-04
6.643474e-11
data <- as.data.frame(matrix(NA, ncol=2,nrow=16))
colnames(data) <- c("lnLik","k")
data[1,] <- c(-6946.7, -6960.017, -6968.715, -6967.93, -6963.618, -6968.995,
-6968.04, -6970.41, -6970.27, -7004.538, -7032.588, -7047.155, -7067.492, -7163.233,
-8344.625, -9385.123)
data[,2] <- c(7,8,4,5,10,5,7,6,8,10,7,8,10,7,10,8)
data
data[,1] <- c(-6946.7, -6960.017, -6968.715, -6967.93, -6963.618, -6968.995,
-6968.04, -6970.41, -6970.27, -7004.538, -7032.588, -7047.155, -7067.492, -7163.233,
-8344.625, -9385.123)
data[,2] <- c(7,8,4,5,10,5,7,6,8,10,7,8,10,7,10,8)
data
AICc(data, n=1039)
AICc <- function(x, n){
results <- vector()
for(i in 1:nrow(x)){
lik <- x[i,"lnLik"]
k <- x[i,"k"]
score <- -2*(log(lik)) + 2 * K * (n / (n - k -1)))
results[i] <- score
}
return(results)
}
AICc <- function(x, n){
results <- vector()
for(i in 1:nrow(x)){
lik <- x[i,"lnLik"]
k <- x[i,"k"]
score <- -2*(log(lik)) + 2 * K * (n / (n - k -1))
results[i] <- score
}
return(results)
}
AICc(data, n=1039)
data
i
i <- 1
lik <- data[i,"lnLik"]
x <- data
lik <- x[i,"lnLik"]
k <- x[i,"k"]
k
lik
AICc <- function(x, n){
results <- vector()
for(i in 1:nrow(x)){
lik <- x[i,"lnLik"]
k <- x[i,"k"]
score <- -2*(log(lik)) + 2 * k * (n / (n - k -1))
results[i] <- score
}
return(results)
}
AICc(data, n=1039)
warnnings
lik <- x[i,"lnLik"]
k <- x[i,"k"]
score <- -2*(log(lik)) + 2 * k * (n / (n - k -1))
score
log(lik)
lik
score <- -2*(lik) + 2 * k * (n / (n - k -1))
n = 1039
score <- -2*(lik) + 2 * k * (n / (n - k -1))
score
AICc <- function(x, n){
results <- vector()
for(i in 1:nrow(x)){
lik <- x[i,"lnLik"]
k <- x[i,"k"]
score <- -2*(lik) + 2 * k * (n / (n - k -1))
results[i] <- score
}
return(results)
}
AICc(data, n=1039)
output <- AICc(data, n=1039)
output
delta.aic <- function(x){
results <- vector()
results[i] <- 0
for(i in 2:length(x)){
score <- x[i] x[i-2]
results[i] <- score
}
return(results)
}
delta.aic <- function(x){
results <- vector()
results[i] <- 0
for(i in 2:length(x)){
score <- x[i] -  x[i-2]
results[i] <- score
}
return(results)
}
delta.aic(output)
delta.aic <- function(x){
results <- vector()
results[1] <- 0
for(i in 2:length(x)){
score <- x[i] -  x[i-2]
results[i] <- score
}
return(results)
}
delta.aic(output)
output[2] - output[2-1]
x <- output
results <- vector()
results[1] <- 0
results
for(i in 2:length(x)){
score <- x[i] -  x[i-2]
results[i] <- score
}
i
score
x[i]
delta.aic <- function(x){
results <- vector()
results[1] <- 0
for(i in 2:length(x)){
score <- x[i] -  x[i-1]
results[i] <- score
}
return(results)
}
delta.aic(output)
i
length(x)
i
ldelta.aic <- function(x){
results <- 0
l <- length(x)
for(i in 2:l){
score <- x[i] -  x[i-1]
results[i] <- score
}
return(results)
}
delta.aic(output)
i
for(i in 2:l){print("yes")}
l <- length9x
l <- length(x)
l
for(i in 2:l){print("yes")}
# x is ordered AIC values
delta.aic <- function(x){
results <- 0
l <- length(x)
for(i in 2:l){
score <- x[i] -  x[1]
results[i] <- score
}
return(results)
}
delta.aic(output)
data$out <- delta.aic(output)
data
AIC.weights <- function(x){
results <- vector()
total <- sum(x)
value <- exp(-0.5 * x)
valueD <- value/total
results <- c(results, valueD)
return(results)
}
# Specialization data
x <- c(0, 28.62, 38.02, 38.45, 39.83, 40.58, 42.47, 45.42, 49.13, 121.67, 171.77, 202.9,
247.57, 433.06, 2801.84, 4878.84)
AIC.weights(x)
out <- AIC.weights(x)
out
plot(1:16, ou)
plot(1:16, out)
1.09e-04
x <- c(0, 28.62, 38.02, 38.45, 39.83, 40.58, 42.47, 45.42, 49.13, 121.67, 171.77, 202.9,
247.57, 433.06, 2801.84, 4878.84)
y <- c(7,8,4,5,10,5,7,6,8,10,7,8,10,7,10,8)
plot(x, y)
plot(y, a)
plot(y, x)
plot(y, x,xlim=c(0,1000))
plot(y, x,ylim=c(0,1000))
AICc <- function(x, n){
results <- vector()
for(i in 1:nrow(x)){
lik <- x[i,"lnLik"]
k <- x[i,"k"]
score <- -2*(lik) + 2 * k * (n / (n - k -1))
results[i] <- score
}
return(results)
}
# specialization data
data <- as.data.frame(matrix(NA, ncol=2,nrow=16))
colnames(data) <- c("lnLik","k")
data[,1] <- c(-6946.7, -6960.017, -6968.715, -6967.93, -6963.618, -6968.995,
-6968.04, -6970.41, -6970.27, -7004.538, -7032.588, -7047.155, -7067.492, -7163.233,
-8344.625, -9385.123)
data[,2] <- c(7,8,4,5,10,5,7,6,8,10,7,8,10,7,10,8)
output <- AICc(data, n=1039)
output1 <- AICc(data, n=100)
plot(output, output1)
output
output1
2*(lik) + 2 * k * (n / (n - k -1))
liks <- c(-6946.70, -6960.02)
lik <- liks[1]
n <- 1039
k <- 7
2*(lik) + 2 * k * (n / (n - k -1))
liks <- lik[2]
k <- 8
2*(lik) + 2 * k * (n / (n - k -1))
n <- 100
2*(lik) + 2 * k * (n / (n - k -1))
7.160362e-02
1.157978e+01
8.729042e-02
1.846782e-04
words <- c("one","two","three")
plot(1:10,1:10)
x <- 1:10
y <- 1:10
plot(x, y)
text(x, y, words)
text(x, y+1, words)
library(ape)
?write.nexus.data
sqrt(10^-14/1)
library(diverstiree)
library(diversitree)
?group.label.tip
??group.label.tip
??group.label.tip.ra
??group.label.tip.rad
library(phytools)
?cladelabels
?tree
?rtree
p <- rtree(5)
plot(p)
?cladelabels
cladelabels(p, "text",3)
plot(p)
nodelabels()
cladelabels(p, "text",9)
cladelabels(p, c("text","text1"),c(9,8))
cladelabels(p, c("text","text1"),c(9,8),offset=1)
plot(p)
cladelabels(p, c("text","text1"),c(9,8),offset=2)
library(BAMMtools)
data(mcmc.whales)
mcmc.whales
head(mcmc.whales)
data(whales)
plot(whales)
data(events.whales)
head(events.whales)
data(prior.whales)
head(prior.whales)
?getEventdata
??getEventdata
library(diversitree)
?tree.bisse
pars <- c(0.1, 0.2, 0.03, 0.03, 0.01, 0.01)
phy <- tree.bisse(pars, max.taxa=30, x0=0)
plot(phy)
is.ultrametric(phy)
phy <- tree.bisse(pars, max.taxa=30, x0=0, include.extinct=TRUE)
plot(phy)
phy <- tree.bisse(pars, max.taxa=30, x0=0, include.extinct=TRUE)
plot(phy)
is.ultrametric(phy)
library(geiger)
data(carnivores)
phy <- carnivores$phy
data <- carnivores$dat
plot(phy)
data
richness <- data[,1]
names(richness) <- rownames(data)
phy <- tree.bisse(pars, max.taxa=30, x0=0)
plot(phy)
phy <- tree.bisse(pars, max.taxa=30, x0=0)
plot(phy)
phy <- tree.bisse(pars, max.taxa=30, x0=0, include.extinct=TRUE)
plot(phy)
dat <- as.data.frame(matrix(NA, ncol=3,nrow=length(phy$tip.label)))
dat
dat$V1 <- 1
dat
dat$V2 <- 1
data
dat$V3 <- 0.5
rownames(dat) <- phy$tip.label
dat
colnames(dat) <- c("richness","mean","variance")
dat
richness <- dat[,1]
head(richness)
names(richness) <- phy$tip.label
priors <- list(priorSigma = c(-4.5, 4.5), priorMean = c(-5, 2))
Cal <- calibrate.mecca(phy, richness, model = "BM", prior.list = priors, Ncalibrations = 1000)
Cal <- calibrate.mecca(phy, richness, model = "BM", prior.list = priors, Ncalibrations = 1000)
Cal
al <- calibrate.mecca(phy, richness, model = "BM", prior.list = priors, Ncalibrations = 1000)
params <- Cal$trait[, c(1,2)] ## extract the calibration BM parameters
stats <- Cal$trait[, -c(1,2)] ## extract the calibration summary stats
## now we run pls, determining combinations of summaries that explain variation in our parameters
## For BM, 2 components is sufficient. For more complex models, more componenets will be required.
myPlsr<-plsr(as.matrix(params) ~ as.matrix(stats), scale=F, ncomp = 2)
plot(RMSEP(myPlsr)) ## Look at Root Mean Square error plots
data <- dat
data
cladeMean<-data[,2]
names(cladeMean)<-rownames(data)
cladeVariance<-data[,3]
names(cladeVariance)<-rownames(data)
start <- startingpt.mecca(Cal, phy, cladeMean, cladeVariance,
tolerance = 0.05, plsdat, BoxCox = TRUE)
plsdat <- myPlsr$loadings
start <- startingpt.mecca(Cal, phy, cladeMean, cladeVariance,
tolerance = 0.05, plsdat, BoxCox = TRUE)
mecca(phy, richness, cladeMean, cladeVariance, model = "BM", prior.list = priors, start = start,
Ngens = 1000, printFreq = 100, sigmaPriorType = "uniform", rootPriorType = "uniform",
SigmaBounds = c(-4.5, 4.5), divPropWidth = 0.1, scale = 2, divSampleFreq = 0, BoxCox = TRUE,
outputName ="MeccaBM.txt")
library(diversitree)
?tree.bisse
pars <- c(0.1, 0.2, 0.03, 0.03, 0.01, 0.01)
phy <- tree.bisse(pars, max.taxa=30, x0=0)
br <- branching.times(phy)
std <- function(x) sd(x)/sqrt(length(x))
v<- c(29.3, 62.5, 64.9, 73)
std(v)
mean(v)
v <- c(6.4, 5.9)
mean(v)
std(v)
v <- c(7.5, 5.9)
mean(v)
std(v)
library(geiger)
library(gitcontinuousMCMC)
library(fitcontinuousMCMC)
library(fitContinuousMCMC)
do.model.fit(phy, data)
library(bonsai)
help(bonsai)
?bonsai
require(phyloch)
require(ape)
data(hordeum)
HPDbars(hordeum, col = "skyblue", lwd = 5)
plot(hordeum, edge.color = 0, tip.color = 0)
HPDbars(hordeum, col = "skyblue", lwd = 5)
## Example code for highlighting HPD node ages for selected nodes in a phylogeny using the package 'phyloch' ##
# HPDbars {phyloch}
specify_node_HPDbars <- function(phy, data, lwd=5 ,col="lightblue")  {
require(phyloch)
require(ape)
# need number of nodes
num.nodes <- phy$Nnode
# identify locations of columns in the supplied data
min.column <- grep("min", colnames(data), ignore.case=TRUE)
max.column <- grep("max", colnames(data), ignore.case=TRUE)
node.column <- grep("node", colnames(data), ignore.case=TRUE)
# generate vectors to put into phylogeny structure for height mins and maxs
# length equal to number of nodes, named by the names of the nodes as seen in object of class 'phylo'
min.vals <- vector(mode="numeric", length=num.nodes)
names(min.vals) <- seq((num.nodes+2), ((num.nodes*2)+1), 1)
max.vals <- vector(mode="numeric", length=num.nodes)
names(max.vals) <- seq((num.nodes+2), ((num.nodes*2)+1), 1)
# add values into vectors
for(i in 1:nrow(data)){
node <- data[i,node.column]
min.vals[grep(node, names(min.vals))] <- data[i,min.column]
max.vals[grep(node, names(max.vals))] <- data[i,max.column]
}
# find which nodes have no data
all.nodes <- data[,node.column]
v <- names(min.vals) %in% all.nodes
min.vals[v==FALSE] <- NA
max.vals[v==FALSE] <- NA
# convoluted procedure for adding in data with correct names
n <- length(phy)
phy$min <- as.numeric(min.vals)
min.txt <- "height_95%_HPD_MIN"
names(phy)[n+1] <- min.txt
phy$max <- as.numeric(max.vals)
names(phy)[n+2] <- "height_95%_HPD_MAX"
# run
plot(phy)
#HPDbars(phy=phy, label="height_95%_HPD", col=col, lwd=lwd)
HPDbars(phy, col=col, lwd=lwd)
}
# simulate tree
library(diversitree)
set.seed(1973)
phy <- tree.bd(pars=c(0.9,0.01), max.taxa=30)
# generate table containing inforation about node ages
# need, "node", "min" and "max" in the colnames in some form
node_ages <- as.data.frame(matrix(NA, ncol=3, nrow=3))
colnames(node_ages) <- c("node", "Minimum", "Maximum")
node_ages[,1] <- c("34", "35", "39")
node_ages[,2] <- c(1.1, 1.2, 0.8)
node_ages[,3] <- c(1.7, 1.8, 2)
specify_node_HPDbars(phy, data)
data
specify_node_HPDbars(phy, data=node_ages)
plot(hordeum, edge.color = 0, tip.color = 0)
HPDbars(hordeum, col = "skyblue", lwd = 5)
phy
str(phy)
num.nodes <- phy$Nnode
# identify locations of columns in the supplied data
min.column <- grep("min", colnames(data), ignore.case=TRUE)
max.column <- grep("max", colnames(data), ignore.case=TRUE)
node.column <- grep("node", colnames(data), ignore.case=TRUE)
min.vals <- vector(mode="numeric", length=num.nodes)
names(min.vals) <- seq((num.nodes+2), ((num.nodes*2)+1), 1)
max.vals <- vector(mode="numeric", length=num.nodes)
names(max.vals) <- seq((num.nodes+2), ((num.nodes*2)+1), 1)
for(i in 1:nrow(data)){
node <- data[i,node.column]
min.vals[grep(node, names(min.vals))] <- data[i,min.column]
max.vals[grep(node, names(max.vals))] <- data[i,max.column]
}
data <- node_Ages
data <- node_ages
# add values into vectors
for(i in 1:nrow(data)){
node <- data[i,node.column]
min.vals[grep(node, names(min.vals))] <- data[i,min.column]
max.vals[grep(node, names(max.vals))] <- data[i,max.column]
}
node
node.column
min.column <- grep("min", colnames(data), ignore.case=TRUE)
max.column <- grep("max", colnames(data), ignore.case=TRUE)
node.column <- grep("node", colnames(data), ignore.case=TRUE)
node.column
# add values into vectors
for(i in 1:nrow(data)){
node <- data[i,node.column]
min.vals[grep(node, names(min.vals))] <- data[i,min.column]
max.vals[grep(node, names(max.vals))] <- data[i,max.column]
}
min.vals
# find which nodes have no data
all.nodes <- data[,node.column]
v <- names(min.vals) %in% all.nodes
min.vals[v==FALSE] <- NA
max.vals[v==FALSE] <- NA
min.vals
max.vals
# convoluted procedure for adding in data with correct names
n <- length(phy)
phy$min <- as.numeric(min.vals)
min.txt <- "height_95%_HPD_MIN"
names(phy)[n+1] <- min.txt
phy$max <- as.numeric(max.vals)
names(phy)[n+2] <- "height_95%_HPD_MAX"
str(phy)
?HPDbars
all.nodes
plot(phy)
HPDbars(phy, col=col, lwd=lwd,nodes=all.nodes)
str(hordeum)
hordeum$height_95%_HPD_MIN
hordeum[11]
hordeum[12]
str(phy)
phy[7]
names(hordeum[[1]])
names(hordeum[11])
names(hordeum[11])==names(phy[7])
all.nodes
col
col = "lightblue"
lwd=5
HPDbars(phy, col=col, lwd=lwd,nodes=all.nodes)
HPDbars(phy, col=col, lwd=lwd)
library(bonsai)
setwd("~/Desktop")
library(phyloch)
phy <- read.nexus("example.phylo.nex")
library(knitr)
?plot.phylo
setwd("~/Desktop/add_HPD_info")
phy <- read.nexus("example.phylo.nex")
plot(phy)
phy$tip.label <- c("sp1","sp2","sp3","sp4","sp5","sp6","sp7","sp8","sp9","sp10","sp11","sp12","sp13", "sp14", "sp15","sp16","sp17","sp18","sp19","sp20")
plot(phy)
write.nexus(phy, file="example.phylo.nex")
